{"/Users/parsazehtab/project_team127/src/controller/FilterValidator.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/FilterValidator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":35}},"3":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"4":{"start":{"line":12,"column":12},"end":{"line":12,"column":25}},"5":{"start":{"line":14,"column":21},"end":{"line":14,"column":40}},"6":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"7":{"start":{"line":16,"column":12},"end":{"line":16,"column":25}},"8":{"start":{"line":18,"column":20},"end":{"line":18,"column":27}},"9":{"start":{"line":19,"column":8},"end":{"line":36,"column":9}},"10":{"start":{"line":21,"column":16},"end":{"line":21,"column":61}},"11":{"start":{"line":23,"column":16},"end":{"line":23,"column":61}},"12":{"start":{"line":25,"column":16},"end":{"line":25,"column":61}},"13":{"start":{"line":27,"column":16},"end":{"line":27,"column":61}},"14":{"start":{"line":29,"column":16},"end":{"line":29,"column":61}},"15":{"start":{"line":31,"column":16},"end":{"line":31,"column":61}},"16":{"start":{"line":33,"column":16},"end":{"line":33,"column":58}},"17":{"start":{"line":35,"column":16},"end":{"line":35,"column":29}},"18":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"19":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}},"20":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"21":{"start":{"line":43,"column":12},"end":{"line":43,"column":25}},"22":{"start":{"line":45,"column":8},"end":{"line":49,"column":9}},"23":{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},"24":{"start":{"line":47,"column":16},"end":{"line":47,"column":29}},"25":{"start":{"line":50,"column":8},"end":{"line":50,"column":20}},"26":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"27":{"start":{"line":54,"column":12},"end":{"line":54,"column":25}},"28":{"start":{"line":56,"column":21},"end":{"line":56,"column":40}},"29":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"30":{"start":{"line":58,"column":12},"end":{"line":58,"column":25}},"31":{"start":{"line":60,"column":20},"end":{"line":60,"column":27}},"32":{"start":{"line":61,"column":22},"end":{"line":61,"column":33}},"33":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"34":{"start":{"line":63,"column":12},"end":{"line":63,"column":25}},"35":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"36":{"start":{"line":66,"column":12},"end":{"line":66,"column":25}},"37":{"start":{"line":68,"column":8},"end":{"line":68,"column":20}},"38":{"start":{"line":71,"column":30},"end":{"line":72,"column":36}},"39":{"start":{"line":73,"column":28},"end":{"line":73,"column":88}},"40":{"start":{"line":73,"column":58},"end":{"line":73,"column":87}},"41":{"start":{"line":74,"column":8},"end":{"line":74,"column":43}},"42":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"43":{"start":{"line":78,"column":12},"end":{"line":78,"column":25}},"44":{"start":{"line":80,"column":21},"end":{"line":80,"column":40}},"45":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"46":{"start":{"line":82,"column":12},"end":{"line":82,"column":25}},"47":{"start":{"line":84,"column":20},"end":{"line":84,"column":27}},"48":{"start":{"line":85,"column":22},"end":{"line":85,"column":33}},"49":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"50":{"start":{"line":87,"column":12},"end":{"line":87,"column":25}},"51":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"52":{"start":{"line":90,"column":12},"end":{"line":90,"column":25}},"53":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"54":{"start":{"line":93,"column":12},"end":{"line":93,"column":25}},"55":{"start":{"line":95,"column":8},"end":{"line":95,"column":20}},"56":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"57":{"start":{"line":99,"column":12},"end":{"line":99,"column":25}},"58":{"start":{"line":101,"column":21},"end":{"line":101,"column":40}},"59":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"60":{"start":{"line":103,"column":12},"end":{"line":103,"column":25}},"61":{"start":{"line":105,"column":8},"end":{"line":105,"column":43}},"62":{"start":{"line":108,"column":22},"end":{"line":108,"column":55}},"63":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"64":{"start":{"line":110,"column":12},"end":{"line":110,"column":25}},"65":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"66":{"start":{"line":113,"column":12},"end":{"line":113,"column":25}},"67":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"68":{"start":{"line":116,"column":12},"end":{"line":116,"column":25}},"69":{"start":{"line":118,"column":8},"end":{"line":118,"column":20}},"70":{"start":{"line":121,"column":0},"end":{"line":121,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":27},"end":{"line":8,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":27},"end":{"line":37,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":33},"end":{"line":51,"column":5}},"line":38},"3":{"name":"(anonymous_3)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":32},"end":{"line":69,"column":5}},"line":52},"4":{"name":"(anonymous_4)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":24},"end":{"line":75,"column":5}},"line":70},"5":{"name":"(anonymous_5)","decl":{"start":{"line":73,"column":46},"end":{"line":73,"column":47}},"loc":{"start":{"line":73,"column":58},"end":{"line":73,"column":87}},"line":73},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":32},"end":{"line":96,"column":5}},"line":76},"7":{"name":"(anonymous_7)","decl":{"start":{"line":97,"column":4},"end":{"line":97,"column":5}},"loc":{"start":{"line":97,"column":29},"end":{"line":106,"column":5}},"line":97},"8":{"name":"(anonymous_8)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":27},"end":{"line":119,"column":5}},"line":107}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},{"start":{"line":11,"column":8},"end":{"line":13,"column":9}}],"line":11},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":56}},"type":"binary-expr","locations":[{"start":{"line":11,"column":12},"end":{"line":11,"column":38}},{"start":{"line":11,"column":42},"end":{"line":11,"column":56}}],"line":11},"2":{"loc":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},{"start":{"line":15,"column":8},"end":{"line":17,"column":9}}],"line":15},"3":{"loc":{"start":{"line":19,"column":8},"end":{"line":36,"column":9}},"type":"switch","locations":[{"start":{"line":20,"column":12},"end":{"line":21,"column":61}},{"start":{"line":22,"column":12},"end":{"line":23,"column":61}},{"start":{"line":24,"column":12},"end":{"line":25,"column":61}},{"start":{"line":26,"column":12},"end":{"line":27,"column":61}},{"start":{"line":28,"column":12},"end":{"line":29,"column":61}},{"start":{"line":30,"column":12},"end":{"line":31,"column":61}},{"start":{"line":32,"column":12},"end":{"line":33,"column":58}},{"start":{"line":34,"column":12},"end":{"line":35,"column":29}}],"line":19},"4":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39},"5":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"6":{"loc":{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},{"start":{"line":46,"column":12},"end":{"line":48,"column":13}}],"line":46},"7":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{"line":53,"column":8},"end":{"line":55,"column":9}}],"line":53},"8":{"loc":{"start":{"line":53,"column":12},"end":{"line":53,"column":57}},"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":38}},{"start":{"line":53,"column":42},"end":{"line":53,"column":57}}],"line":53},"9":{"loc":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},{"start":{"line":57,"column":8},"end":{"line":59,"column":9}}],"line":57},"10":{"loc":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},{"start":{"line":62,"column":8},"end":{"line":64,"column":9}}],"line":62},"11":{"loc":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},{"start":{"line":65,"column":8},"end":{"line":67,"column":9}}],"line":65},"12":{"loc":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},{"start":{"line":77,"column":8},"end":{"line":79,"column":9}}],"line":77},"13":{"loc":{"start":{"line":77,"column":12},"end":{"line":77,"column":57}},"type":"binary-expr","locations":[{"start":{"line":77,"column":12},"end":{"line":77,"column":38}},{"start":{"line":77,"column":42},"end":{"line":77,"column":57}}],"line":77},"14":{"loc":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},{"start":{"line":81,"column":8},"end":{"line":83,"column":9}}],"line":81},"15":{"loc":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},{"start":{"line":86,"column":8},"end":{"line":88,"column":9}}],"line":86},"16":{"loc":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},{"start":{"line":89,"column":8},"end":{"line":91,"column":9}}],"line":89},"17":{"loc":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},{"start":{"line":92,"column":8},"end":{"line":94,"column":9}}],"line":92},"18":{"loc":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},{"start":{"line":98,"column":8},"end":{"line":100,"column":9}}],"line":98},"19":{"loc":{"start":{"line":98,"column":12},"end":{"line":98,"column":57}},"type":"binary-expr","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":38}},{"start":{"line":98,"column":42},"end":{"line":98,"column":57}}],"line":98},"20":{"loc":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},{"start":{"line":102,"column":8},"end":{"line":104,"column":9}}],"line":102},"21":{"loc":{"start":{"line":108,"column":23},"end":{"line":108,"column":47}},"type":"binary-expr","locations":[{"start":{"line":108,"column":23},"end":{"line":108,"column":41}},{"start":{"line":108,"column":45},"end":{"line":108,"column":47}}],"line":108},"22":{"loc":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},{"start":{"line":109,"column":8},"end":{"line":111,"column":9}}],"line":109},"23":{"loc":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},{"start":{"line":112,"column":8},"end":{"line":114,"column":9}}],"line":112},"24":{"loc":{"start":{"line":112,"column":12},"end":{"line":112,"column":78}},"type":"binary-expr","locations":[{"start":{"line":112,"column":12},"end":{"line":112,"column":23}},{"start":{"line":112,"column":27},"end":{"line":112,"column":43}},{"start":{"line":112,"column":47},"end":{"line":112,"column":78}}],"line":112},"25":{"loc":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},{"start":{"line":115,"column":8},"end":{"line":117,"column":9}}],"line":115},"26":{"loc":{"start":{"line":115,"column":12},"end":{"line":115,"column":80}},"type":"binary-expr","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":23}},{"start":{"line":115,"column":28},"end":{"line":115,"column":44}},{"start":{"line":115,"column":48},"end":{"line":115,"column":79}}],"line":115}},"s":{"0":1,"1":1,"2":57,"3":86,"4":0,"5":86,"6":86,"7":0,"8":86,"9":86,"10":11,"11":10,"12":17,"13":9,"14":9,"15":18,"16":10,"17":2,"18":21,"19":4,"20":17,"21":6,"22":11,"23":22,"24":0,"25":11,"26":35,"27":0,"28":35,"29":35,"30":3,"31":32,"32":32,"33":32,"34":1,"35":31,"36":7,"37":24,"38":50,"39":50,"40":500,"41":50,"42":18,"43":0,"44":18,"45":18,"46":0,"47":18,"48":18,"49":18,"50":1,"51":17,"52":2,"53":15,"54":2,"55":13,"56":10,"57":1,"58":9,"59":9,"60":3,"61":6,"62":15,"63":15,"64":1,"65":14,"66":1,"67":13,"68":0,"69":13,"70":1},"f":{"0":57,"1":86,"2":21,"3":35,"4":50,"5":500,"6":18,"7":10,"8":15},"b":{"0":[0,86],"1":[86,86],"2":[0,86],"3":[11,10,17,9,9,18,10,2],"4":[4,17],"5":[6,11],"6":[0,22],"7":[0,35],"8":[35,35],"9":[3,32],"10":[1,31],"11":[7,24],"12":[0,18],"13":[18,18],"14":[0,18],"15":[1,17],"16":[2,15],"17":[2,13],"18":[1,9],"19":[10,9],"20":[3,6],"21":[15,6],"22":[1,14],"23":[1,13],"24":[14,6,3],"25":[0,13],"26":[13,2,2]},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/FilterValidator.ts","sources":["/Users/parsazehtab/project_team127/src/controller/FilterValidator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Class to handle all the different filters for a query\n * Purpose is to break code up and have specific focuses in each class\n * Further, makes the recursive handling of the LComparator arrays much easier to handle\n */\nexport class FilterValidator {\n\tprivate dataSetID: string;\n\t/**\n\t * Default constructor\n\t */\n\tconstructor(dataSetID: string) {\n\t\tthis.dataSetID = dataSetID;\n\t};\n\n\t/**\n\t * Method to determine the filter type and handle the validation accordingly\n\t * @param filter\n\t */\n\tpublic validateFilter(filter: any): boolean {\n\t\tif (typeof filter !== \"object\" || filter == null) {\n\t\t\treturn false;\n\t\t}\n\t\tconst keys = Object.keys(filter);\n\n\t\tif (keys.length !== 1) {\n\t\t\treturn false;\n\t\t}\n\t\tconst key = keys[0];\n\n\t\tswitch (key) {\n\t\t\tcase \"AND\":\n\t\t\t\treturn this.validateLComparator(filter[key]);\n\t\t\tcase \"OR\":\n\t\t\t\treturn this.validateLComparator(filter[key]);\n\t\t\tcase \"GT\":\n\t\t\t\treturn this.validateMComparator(filter[key]);\n\t\t\tcase \"LT\":\n\t\t\t\treturn this.validateMComparator(filter[key]);\n\t\t\tcase \"EQ\":\n\t\t\t\treturn this.validateMComparator(filter[key]);\n\t\t\tcase \"IS\":\n\t\t\t\treturn this.validateSComparator(filter[key]);\n\t\t\tcase \"NOT\":\n\t\t\t\treturn this.validateNegation(filter[key]);\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Validate LCOMPARATOR (AND, OR)\n\tprivate validateLComparator(filters: any[]): boolean {\n\t\t// first let's check if the filter is indeed an array as it has to be for LComparators\n\t\tif(!Array.isArray(filters)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The array needs to have a length of at least one\n\t\tif (filters.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Every filter in the array needs to be valid\n\t\tfor (const filter of filters) {\n\t\t\tif (!this.validateFilter(filter)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Validate MCOMPARATOR (GT, LT, EQ)\n\tprivate validateMComparator(filter: any): boolean {\n\t\t// CHECK if the filter is a valid object and not null\n\t\tif (typeof filter !== \"object\" || filter === null) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if the filter has EXACTLY one key-pair value\n\t\tconst keys = Object.keys(filter);\n\t\tif (keys.length !== 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst key = keys[0];\n\t\tconst value = filter[key];\n\n\t\t// Check if the key is a valid field\n\t\t// Will likely update based on Zach implementation\n\t\tif (!this.isValidField(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure that type of value is numeric\n\t\tif (typeof value !== \"number\") {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t// FIRST PART BEFORE underscore is dynamic\n\tprivate isValidField(field: string): boolean {\n\t\tconst validSuffixes = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\", \"year\", \"avg\",\n\t\t\t\"pass\", \"fail\", \"audit\"];\n\t\tconst validFields = validSuffixes.map((suffix) => `${this.dataSetID}_${suffix}`);\n\t\treturn validFields.includes(field);\n\t}\n\n\t// Validate SCOMPARATOR (IS)\n\tprivate validateSComparator(filter: any): boolean {\n\t\t// Check if the filter is an object and not null, if either is false, return false\n\t\tif (typeof filter !== \"object\" || filter === null) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if the filter has EXACTLY one key-pair value\n\t\tconst keys = Object.keys(filter);\n\t\tif (keys.length !== 1) {\n\t\t\treturn false;\n\t\t}\n\t\tconst key = keys[0];\n\t\tconst value = filter[key];\n\n\t\t// Check if the key is a valid field\n\t\t// Will likely update based on Zach implementation\n\t\tif (!this.isValidField(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if typeof value is a string\n\t\tif (typeof value !== \"string\") {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check wildcard constraint\n\t\tif (!this.isValidWildCard(value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Validate NEGATION (NOT)\n\tprivate validateNegation(filter: any): boolean {\n\t\tif (typeof filter !== \"object\" || filter === null) {\n\t\t\treturn false;\n\t\t}\n\t\t// The NOT filter should have exactly one other filter inside it\n\t\tconst keys = Object.keys(filter);\n\t\tif (keys.length !== 1) {\n\t\t\treturn false;\n\t\t}\n\t\t// Validate the inner filter\n\t\treturn this.validateFilter(filter);\n\t}\n\n\tprivate isValidWildCard(value: string) {\n\t\t// Count the number of * in the string\n\t\tconst count = (value.match(/\\*/g) || []).length;\n\t\t// If there is more than two *, it is invalid\n\t\tif (count > 2) {\n\t\t\treturn false;\n\t\t}\n\t\t// If there is 1 *, it should be at the start or end of the string\n\t\tif (count === 1 && value[0] !== \"*\" && value[value.length - 1] !== \"*\") {\n\t\t\treturn false;\n\t\t}\n\t\t// If there are 2 *, they should be at the start and at the end of the string\n\t\tif (count === 2 && (value[0] !== \"*\" || value[value.length - 1] !== \"*\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9d1a36bfbc16eb51e1c446912193790d463338c8","contentHash":"7899307d03ba84e69dd6e06c9ac1f257ebaee982f63a85de367f438e49790b75"},"/Users/parsazehtab/project_team127/src/controller/IInsightFacade.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":7,"6":7,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":7,"2":0,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/IInsightFacade.ts","sources":["/Users/parsazehtab/project_team127/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d1a2aed339fa692043a73582372124fe54e2db09","contentHash":"2db23b9f678ccb7baa2c39dc0b4d515129c6a2334ef4bf9630c4fd0a7f3fb6a4"},"/Users/parsazehtab/project_team127/src/controller/InsightFacade.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":49}},"2":{"start":{"line":8,"column":8},"end":{"line":8,"column":50}},"3":{"start":{"line":11,"column":8},"end":{"line":11,"column":50}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":50}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":50}},"6":{"start":{"line":20,"column":0},"end":{"line":20,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":18},"end":{"line":6,"column":5}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":34},"end":{"line":9,"column":5}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":22},"end":{"line":12,"column":5}},"line":10},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":24},"end":{"line":15,"column":5}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":19},"end":{"line":18,"column":5}},"line":16}},"branchMap":{},"s":{"0":1,"1":2,"2":2,"3":0,"4":0,"5":0,"6":1},"f":{"0":2,"1":2,"2":0,"3":0,"4":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/InsightFacade.ts","sources":["/Users/parsazehtab/project_team127/src/controller/InsightFacade.ts"],"names":[],"mappings":";;AAcA,MAAqB,aAAa;IACjC;QACC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC1C,CAAC;IAEM,UAAU,CAAC,EAAU,EAAE,OAAe,EAAE,IAAwB;QACtE,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC3C,CAAC;IAEM,aAAa,CAAC,EAAU;QAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC3C,CAAC;IAEM,YAAY,CAAC,KAAc;QACjC,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC3C,CAAC;IAEM,YAAY;QAClB,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC3C,CAAC;CACD;AApBD,gCAoBC","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n} from \"./IInsightFacade\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tconstructor() {\n\t\tconsole.log(\"InsightFacadeImpl::init()\");\n\t}\n\n\tpublic addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n\n\tpublic removeDataset(id: string): Promise<string> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n\n\tpublic performQuery(query: unknown): Promise<InsightResult[]> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n\n\tpublic listDatasets(): Promise<InsightDataset[]> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"49c13bf728c84324fc0bacf6d9f640c66a715843","contentHash":"dfb733b8cf9f3b27a592c9d96096c6c8eea9f646644bbfce07097c390d74c74b"},"/Users/parsazehtab/project_team127/src/controller/OptionNode.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/OptionNode.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"4":{"start":{"line":11,"column":12},"end":{"line":11,"column":134}},"5":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"6":{"start":{"line":13,"column":52},"end":{"line":13,"column":78}},"7":{"start":{"line":14,"column":12},"end":{"line":14,"column":95}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":35}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":44}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":48}},"11":{"start":{"line":21,"column":8},"end":{"line":25,"column":9}},"12":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"13":{"start":{"line":23,"column":16},"end":{"line":23,"column":29}},"14":{"start":{"line":26,"column":8},"end":{"line":30,"column":9}},"15":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"16":{"start":{"line":28,"column":16},"end":{"line":28,"column":29}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":20}},"18":{"start":{"line":34,"column":22},"end":{"line":42,"column":10}},"19":{"start":{"line":35,"column":32},"end":{"line":35,"column":34}},"20":{"start":{"line":36,"column":12},"end":{"line":40,"column":13}},"21":{"start":{"line":37,"column":16},"end":{"line":39,"column":17}},"22":{"start":{"line":38,"column":20},"end":{"line":38,"column":58}},"23":{"start":{"line":41,"column":12},"end":{"line":41,"column":33}},"24":{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},"25":{"start":{"line":44,"column":12},"end":{"line":52,"column":15}},"26":{"start":{"line":45,"column":33},"end":{"line":45,"column":43}},"27":{"start":{"line":46,"column":16},"end":{"line":51,"column":17}},"28":{"start":{"line":47,"column":20},"end":{"line":47,"column":66}},"29":{"start":{"line":50,"column":20},"end":{"line":50,"column":53}},"30":{"start":{"line":54,"column":8},"end":{"line":54,"column":23}},"31":{"start":{"line":57,"column":30},"end":{"line":58,"column":36}},"32":{"start":{"line":59,"column":28},"end":{"line":59,"column":88}},"33":{"start":{"line":59,"column":58},"end":{"line":59,"column":87}},"34":{"start":{"line":60,"column":8},"end":{"line":60,"column":43}},"35":{"start":{"line":63,"column":0},"end":{"line":63,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":41},"end":{"line":19,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":40},"end":{"line":13,"column":41}},"loc":{"start":{"line":13,"column":52},"end":{"line":13,"column":78}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":15},"end":{"line":32,"column":5}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":22},"end":{"line":55,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":34},"end":{"line":34,"column":35}},"loc":{"start":{"line":34,"column":45},"end":{"line":42,"column":9}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":25},"end":{"line":44,"column":26}},"loc":{"start":{"line":44,"column":35},"end":{"line":52,"column":13}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":24},"end":{"line":61,"column":5}},"line":56},"7":{"name":"(anonymous_7)","decl":{"start":{"line":59,"column":46},"end":{"line":59,"column":47}},"loc":{"start":{"line":59,"column":58},"end":{"line":59,"column":87}},"line":59}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10},"1":{"loc":{"start":{"line":10,"column":12},"end":{"line":10,"column":73}},"type":"binary-expr","locations":[{"start":{"line":10,"column":12},"end":{"line":10,"column":33}},{"start":{"line":10,"column":37},"end":{"line":10,"column":73}}],"line":10},"2":{"loc":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},{"start":{"line":13,"column":8},"end":{"line":15,"column":9}}],"line":13},"3":{"loc":{"start":{"line":18,"column":21},"end":{"line":18,"column":47}},"type":"binary-expr","locations":[{"start":{"line":18,"column":21},"end":{"line":18,"column":39}},{"start":{"line":18,"column":43},"end":{"line":18,"column":47}}],"line":18},"4":{"loc":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},{"start":{"line":22,"column":12},"end":{"line":24,"column":13}}],"line":22},"5":{"loc":{"start":{"line":26,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":30,"column":9}},{"start":{"line":26,"column":8},"end":{"line":30,"column":9}}],"line":26},"6":{"loc":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},{"start":{"line":27,"column":12},"end":{"line":29,"column":13}}],"line":27},"7":{"loc":{"start":{"line":27,"column":16},"end":{"line":27,"column":84}},"type":"binary-expr","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":46}},{"start":{"line":27,"column":50},"end":{"line":27,"column":84}}],"line":27},"8":{"loc":{"start":{"line":37,"column":16},"end":{"line":39,"column":17}},"type":"if","locations":[{"start":{"line":37,"column":16},"end":{"line":39,"column":17}},{"start":{"line":37,"column":16},"end":{"line":39,"column":17}}],"line":37},"9":{"loc":{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},{"start":{"line":43,"column":8},"end":{"line":53,"column":9}}],"line":43},"10":{"loc":{"start":{"line":46,"column":16},"end":{"line":51,"column":17}},"type":"if","locations":[{"start":{"line":46,"column":16},"end":{"line":51,"column":17}},{"start":{"line":46,"column":16},"end":{"line":51,"column":17}}],"line":46}},"s":{"0":1,"1":1,"2":1,"3":15,"4":2,"5":13,"6":26,"7":1,"8":12,"9":12,"10":12,"11":6,"12":12,"13":1,"14":5,"15":4,"16":2,"17":3,"18":4,"19":9,"20":9,"21":18,"22":18,"23":9,"24":4,"25":3,"26":8,"27":8,"28":0,"29":8,"30":4,"31":12,"32":12,"33":120,"34":12,"35":1},"f":{"0":15,"1":26,"2":6,"3":4,"4":9,"5":8,"6":12,"7":120},"b":{"0":[2,13],"1":[15,14],"2":[1,12],"3":[12,4],"4":[1,11],"5":[4,1],"6":[2,2],"7":[4,3],"8":[18,0],"9":[3,1],"10":[0,8]},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/OptionNode.ts","sources":["/Users/parsazehtab/project_team127/src/controller/OptionNode.ts"],"names":[],"mappings":";;;AAAA,qDAA8C;AAE9C,MAAa,UAAU;IACd,OAAO,CAAW;IAClB,KAAK,CAAgB;IACrB,SAAS,CAAS;IAO1B,YAAY,YAAiB,EAAE,SAAiB;QAC/C,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;YAClE,MAAM,IAAI,6BAAY,CAAC,gFAAgF,CAAC,CAAC;SACzG;QACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,EAAE;YAC7E,MAAM,IAAI,6BAAY,CAAC,yCAAyC,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC;IACzC,CAAC;IAQM,QAAQ;QAEd,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO,KAAK,CAAC;aACb;SACD;QAED,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACxB,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACzE,OAAO,KAAK,CAAC;aACb;SACD;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IASM,QAAQ,CAAC,OAAc;QAC7B,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACnC,IAAI,aAAa,GAAQ,EAAE,CAAC;YAC5B,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChC,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;oBACxD,aAAa,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;iBACtC;aACD;YACD,OAAO,aAAa,CAAC;QACtB,CAAC,CAAC,CAAC;QAGH,IAAI,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAe,CAAC;gBAEtC,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBACpC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC9C;qBAAM;oBACN,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;iBACjC;YACF,CAAC,CAAC,CAAC;SACH;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAEO,YAAY,CAAC,KAAa;QACjC,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK;YAChF,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1B,MAAM,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,MAAM,EAAE,CAAC,CAAC;QACjF,OAAO,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACD;AArFD,gCAqFC","sourcesContent":["import {InsightError} from \"./IInsightFacade\";\n\nexport class OptionNode {\n\tprivate columns: string[];\n\tprivate order: string | null;\n\tprivate dataSetID: string;\n\n\t/**\n\t * Constructor the OptionNode class\n\t * @param optionClause\n\t * optionClause is the option clause from the query\n\t */\n\tconstructor(optionClause: any, dataSetID: string) {\n\t\tif (!optionClause.COLUMNS || !Array.isArray(optionClause.COLUMNS)) {\n\t\t\tthrow new InsightError(\"OPTIONS needs to have a columns key with an array value: it does not right now\");\n\t\t}\n\t\tif (!optionClause.COLUMNS.every((column: any) => typeof column === \"string\")) {\n\t\t\tthrow new InsightError(\"All elements in COLUMNS must be strings\");\n\t\t}\n\t\tthis.dataSetID = dataSetID;\n\t\tthis.columns = optionClause.COLUMNS;\n\t\tthis.order = optionClause.ORDER || null;\n\t}\n\n\t/**\n\t * validation method for OptionNode\n\t * @return boolean\n\t * returns true if the COLUMNS and ORDER keys are valid, otherwise, return false\n\t */\n\n\tpublic validate(): boolean {\n\t\t// Check first if all fields in COLUMN are valid\n\t\tfor (let field of this.columns) {\n\t\t\tif (!this.isValidField(field)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// ORDER has to be a string and it has to exists in COLUMNS\n\t\tif (this.order !== null) {\n\t\t\tif (typeof this.order !== \"string\" || !this.columns.includes(this.order)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Method that will process the dataset based on the OPTIONS clause\n\t * Will organize the data based on it, and return an array containing the results\n\t * @param dataset the dataset to organize\n\t * @return any[] the organized dataset\n\t */\n\n\tpublic evaluate(dataset: any[]): any[] {\n\t\tlet results = dataset.map((entry) => {\n\t\t\tlet filteredEntry: any = {};\n\t\t\tfor (let column of this.columns) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(entry, column)) {\n\t\t\t\t\tfilteredEntry[column] = entry[column];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn filteredEntry;\n\t\t});\n\n\t\t// Now we can order the results:\n\t\tif (this.order) {\n\t\t\tresults.sort((a, b) => {\n\t\t\t\t// Using type assertion to ensure TypeScript knows the type\n\t\t\t\tconst orderKey = this.order as string;\n\n\t\t\t\tif (typeof a[orderKey] === \"string\") {\n\t\t\t\t\treturn a[orderKey].localeCompare(b[orderKey]);\n\t\t\t\t} else {\n\t\t\t\t\treturn a[orderKey] - b[orderKey];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate isValidField(field: string) {\n\t\tconst validSuffixes = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\", \"year\", \"avg\",\n\t\t\t\"pass\", \"fail\", \"audit\"];\n\t\tconst validFields = validSuffixes.map((suffix) => `${this.dataSetID}_${suffix}`);\n\t\treturn validFields.includes(field);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2ec160bbff51a0d12e832ff62080bc445fc6f299","contentHash":"67954d2cca5513a78ced4c2c89fad1c464e9da9615f48c298878f17df1423159"},"/Users/parsazehtab/project_team127/src/controller/QueryNode.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/QueryNode.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":21},"end":{"line":6,"column":44}},"5":{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},"6":{"start":{"line":13,"column":12},"end":{"line":13,"column":109}},"7":{"start":{"line":15,"column":8},"end":{"line":15,"column":35}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":80}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":85}},"10":{"start":{"line":20,"column":8},"end":{"line":20,"column":71}},"11":{"start":{"line":23,"column":32},"end":{"line":23,"column":64}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":57}},"13":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":34},"end":{"line":18,"column":5}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":15},"end":{"line":21,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":22},"end":{"line":25,"column":5}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},{"start":{"line":12,"column":8},"end":{"line":14,"column":9}}],"line":12},"1":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":42}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":24}},{"start":{"line":12,"column":28},"end":{"line":12,"column":42}}],"line":12},"2":{"loc":{"start":{"line":20,"column":15},"end":{"line":20,"column":70}},"type":"binary-expr","locations":[{"start":{"line":20,"column":15},"end":{"line":20,"column":40}},{"start":{"line":20,"column":44},"end":{"line":20,"column":70}}],"line":20}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":3,"6":2,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":3,"1":1,"2":0},"b":{"0":[2,1],"1":[3,2],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/QueryNode.ts","sources":["/Users/parsazehtab/project_team127/src/controller/QueryNode.ts"],"names":[],"mappings":";;;AAAA,qDAA6D;AAC7D,2CAAsC;AACtC,6CAAwC;AASxC,MAAa,SAAS;IACb,SAAS,CAAY;IACrB,UAAU,CAAa;IACvB,SAAS,CAAS;IAQ1B,YAAY,KAAU,EAAE,SAAiB;QACxC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACnC,MAAM,IAAI,6BAAY,CAAC,uDAAuD,CAAC,CAAC;SAChF;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,uBAAU,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC;IAQM,QAAQ;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAChE,CAAC;IASM,QAAQ,CAAC,OAAc;QAC7B,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IAClD,CAAC;CACD;AAzCD,8BAyCC","sourcesContent":["import {InsightError, InsightResult} from \"./IInsightFacade\";\nimport {WhereNode} from \"./WhereNode\";\nimport {OptionNode} from \"./OptionNode\";\n\n/**\n * High level represents of a query\n * Class will delegate the validation and evaluation of the WHERE and OPTIONS clauses to the WhereNode and OptionNode\n * classes respectively.\n * performQuery in InsightFacade.ts will use the QueryNode, specifically, the validate and evaluate methods, to perform\n * a query and return the results.\n */\nexport class QueryNode {\n\tprivate whereNode: WhereNode;\n\tprivate optionNode: OptionNode;\n\tprivate dataSetID: string;\n\n\t/**\n\t * The constructor for the QueryNode class\n\t * Takes in a query as a parameter\n\t * NOTES: right now, optionNode will throw it's own error, whereas I am relying on queryNode to catch WhereNode\n\t * error, as the constructor for WhereNode does not throw an error\n\t */\n\tconstructor(query: any, dataSetID: string) {\n\t\tif (!query.WHERE || !query.OPTIONS) {\n\t\t\tthrow new InsightError(\"Query must contain both a WHERE and an OPTIONS clause\");\n\t\t}\n\t\tthis.dataSetID = dataSetID;\n\t\tthis.whereNode = new WhereNode(query.WHERE, this.dataSetID);\n\t\tthis.optionNode = new OptionNode(query.OPTIONS, this.dataSetID);\n\t}\n\n\t/**\n\t * validation method, used to ensure that both the WHERE and OPTION blocks of the query object are correct\n\t * Invokes the whereNode classes validate method and the optionNode classes validate method.\n\t * If both are valid, will return true\n\t * else, it will return false\n\t */\n\tpublic validate(): boolean {\n\t\treturn this.whereNode.validate() && this.optionNode.validate();\n\t}\n\n\t/**\n\t * Method to evaluate the dataset\n\t * @param dataset[]\n\t * Evaluates the query against a given dataset: filters the data using the whereNode and processes the node using\n\t * the optionNode\n\t */\n\n\tpublic evaluate(dataset: any[]): InsightResult[] {\n\t\tconst filteredResults = this.whereNode.evaluate(dataset);\n\t\treturn this.optionNode.evaluate(filteredResults);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9e3f9e1538ce464b1f6a31e9075eedb10022d65f","contentHash":"73f1839474f0b8f8633353d96558a530359256ad0d3848f73392decd79b0b24f"},"/Users/parsazehtab/project_team127/src/controller/WhereNode.ts":{"path":"/Users/parsazehtab/project_team127/src/controller/WhereNode.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":26},"end":{"line":5,"column":54}},"4":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"5":{"start":{"line":12,"column":12},"end":{"line":12,"column":121}},"6":{"start":{"line":14,"column":8},"end":{"line":19,"column":9}},"7":{"start":{"line":15,"column":12},"end":{"line":15,"column":31}},"8":{"start":{"line":18,"column":12},"end":{"line":18,"column":38}},"9":{"start":{"line":20,"column":8},"end":{"line":20,"column":35}},"10":{"start":{"line":21,"column":8},"end":{"line":21,"column":85}},"11":{"start":{"line":24,"column":8},"end":{"line":27,"column":9}},"12":{"start":{"line":25,"column":12},"end":{"line":25,"column":52}},"13":{"start":{"line":26,"column":12},"end":{"line":26,"column":24}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":64}},"15":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"16":{"start":{"line":32,"column":12},"end":{"line":32,"column":27}},"17":{"start":{"line":34,"column":29},"end":{"line":34,"column":31}},"18":{"start":{"line":35,"column":26},"end":{"line":35,"column":53}},"19":{"start":{"line":36,"column":28},"end":{"line":36,"column":50}},"20":{"start":{"line":37,"column":8},"end":{"line":60,"column":9}},"21":{"start":{"line":39,"column":16},"end":{"line":39,"column":71}},"22":{"start":{"line":40,"column":16},"end":{"line":40,"column":22}},"23":{"start":{"line":42,"column":16},"end":{"line":42,"column":71}},"24":{"start":{"line":43,"column":16},"end":{"line":43,"column":22}},"25":{"start":{"line":45,"column":16},"end":{"line":45,"column":71}},"26":{"start":{"line":46,"column":16},"end":{"line":46,"column":22}},"27":{"start":{"line":48,"column":16},"end":{"line":48,"column":71}},"28":{"start":{"line":49,"column":16},"end":{"line":49,"column":22}},"29":{"start":{"line":51,"column":16},"end":{"line":51,"column":72}},"30":{"start":{"line":52,"column":16},"end":{"line":52,"column":22}},"31":{"start":{"line":54,"column":16},"end":{"line":54,"column":71}},"32":{"start":{"line":55,"column":16},"end":{"line":55,"column":22}},"33":{"start":{"line":57,"column":16},"end":{"line":57,"column":72}},"34":{"start":{"line":59,"column":16},"end":{"line":59,"column":26}},"35":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"36":{"start":{"line":62,"column":12},"end":{"line":62,"column":91}},"37":{"start":{"line":64,"column":8},"end":{"line":64,"column":30}},"38":{"start":{"line":67,"column":22},"end":{"line":67,"column":49}},"39":{"start":{"line":68,"column":22},"end":{"line":68,"column":40}},"40":{"start":{"line":69,"column":32},"end":{"line":71,"column":10}},"41":{"start":{"line":70,"column":12},"end":{"line":70,"column":94}},"42":{"start":{"line":72,"column":8},"end":{"line":72,"column":31}},"43":{"start":{"line":75,"column":22},"end":{"line":75,"column":49}},"44":{"start":{"line":76,"column":22},"end":{"line":76,"column":40}},"45":{"start":{"line":77,"column":32},"end":{"line":79,"column":10}},"46":{"start":{"line":78,"column":12},"end":{"line":78,"column":94}},"47":{"start":{"line":80,"column":8},"end":{"line":80,"column":31}},"48":{"start":{"line":83,"column":22},"end":{"line":83,"column":49}},"49":{"start":{"line":84,"column":22},"end":{"line":84,"column":40}},"50":{"start":{"line":85,"column":32},"end":{"line":87,"column":10}},"51":{"start":{"line":86,"column":12},"end":{"line":86,"column":96}},"52":{"start":{"line":88,"column":8},"end":{"line":88,"column":31}},"53":{"start":{"line":91,"column":22},"end":{"line":91,"column":49}},"54":{"start":{"line":92,"column":22},"end":{"line":92,"column":40}},"55":{"start":{"line":93,"column":35},"end":{"line":93,"column":56}},"56":{"start":{"line":94,"column":33},"end":{"line":94,"column":52}},"57":{"start":{"line":95,"column":25},"end":{"line":95,"column":54}},"58":{"start":{"line":96,"column":8},"end":{"line":114,"column":11}},"59":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"60":{"start":{"line":98,"column":16},"end":{"line":98,"column":29}},"61":{"start":{"line":100,"column":31},"end":{"line":100,"column":43}},"62":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"63":{"start":{"line":102,"column":16},"end":{"line":102,"column":47}},"64":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"65":{"start":{"line":105,"column":16},"end":{"line":105,"column":55}},"66":{"start":{"line":107,"column":12},"end":{"line":109,"column":13}},"67":{"start":{"line":108,"column":16},"end":{"line":108,"column":53}},"68":{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},"69":{"start":{"line":111,"column":16},"end":{"line":111,"column":53}},"70":{"start":{"line":113,"column":12},"end":{"line":113,"column":25}},"71":{"start":{"line":117,"column":29},"end":{"line":117,"column":36}},"72":{"start":{"line":118,"column":8},"end":{"line":121,"column":9}},"73":{"start":{"line":119,"column":30},"end":{"line":119,"column":67}},"74":{"start":{"line":120,"column":12},"end":{"line":120,"column":64}},"75":{"start":{"line":122,"column":8},"end":{"line":122,"column":30}},"76":{"start":{"line":125,"column":29},"end":{"line":125,"column":31}},"77":{"start":{"line":126,"column":8},"end":{"line":134,"column":9}},"78":{"start":{"line":127,"column":30},"end":{"line":127,"column":67}},"79":{"start":{"line":128,"column":36},"end":{"line":128,"column":63}},"80":{"start":{"line":129,"column":12},"end":{"line":133,"column":13}},"81":{"start":{"line":130,"column":16},"end":{"line":132,"column":17}},"82":{"start":{"line":131,"column":20},"end":{"line":131,"column":48}},"83":{"start":{"line":135,"column":8},"end":{"line":135,"column":30}},"84":{"start":{"line":138,"column":26},"end":{"line":138,"column":68}},"85":{"start":{"line":139,"column":32},"end":{"line":139,"column":59}},"86":{"start":{"line":140,"column":33},"end":{"line":140,"column":35}},"87":{"start":{"line":141,"column":8},"end":{"line":145,"column":9}},"88":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"89":{"start":{"line":143,"column":16},"end":{"line":143,"column":47}},"90":{"start":{"line":146,"column":8},"end":{"line":146,"column":34}},"91":{"start":{"line":149,"column":0},"end":{"line":149,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":40},"end":{"line":22,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":15},"end":{"line":29,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":22},"end":{"line":65,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":37},"end":{"line":73,"column":5}},"line":66},"4":{"name":"(anonymous_4)","decl":{"start":{"line":69,"column":47},"end":{"line":69,"column":48}},"loc":{"start":{"line":69,"column":58},"end":{"line":71,"column":9}},"line":69},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":37},"end":{"line":81,"column":5}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":77,"column":47},"end":{"line":77,"column":48}},"loc":{"start":{"line":77,"column":58},"end":{"line":79,"column":9}},"line":77},"7":{"name":"(anonymous_7)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":37},"end":{"line":89,"column":5}},"line":82},"8":{"name":"(anonymous_8)","decl":{"start":{"line":85,"column":47},"end":{"line":85,"column":48}},"loc":{"start":{"line":85,"column":58},"end":{"line":87,"column":9}},"line":85},"9":{"name":"(anonymous_9)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":37},"end":{"line":115,"column":5}},"line":90},"10":{"name":"(anonymous_10)","decl":{"start":{"line":96,"column":30},"end":{"line":96,"column":31}},"loc":{"start":{"line":96,"column":41},"end":{"line":114,"column":9}},"line":96},"11":{"name":"(anonymous_11)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":38},"end":{"line":123,"column":5}},"line":116},"12":{"name":"(anonymous_12)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":37},"end":{"line":136,"column":5}},"line":124},"13":{"name":"(anonymous_13)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":38},"end":{"line":147,"column":5}},"line":137}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},{"start":{"line":11,"column":8},"end":{"line":13,"column":9}}],"line":11},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":67}},"type":"binary-expr","locations":[{"start":{"line":11,"column":12},"end":{"line":11,"column":43}},{"start":{"line":11,"column":47},"end":{"line":11,"column":67}}],"line":11},"2":{"loc":{"start":{"line":14,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":19,"column":9}},{"start":{"line":14,"column":8},"end":{"line":19,"column":9}}],"line":14},"3":{"loc":{"start":{"line":24,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":27,"column":9}},{"start":{"line":24,"column":8},"end":{"line":27,"column":9}}],"line":24},"4":{"loc":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},{"start":{"line":31,"column":8},"end":{"line":33,"column":9}}],"line":31},"5":{"loc":{"start":{"line":37,"column":8},"end":{"line":60,"column":9}},"type":"switch","locations":[{"start":{"line":38,"column":12},"end":{"line":40,"column":22}},{"start":{"line":41,"column":12},"end":{"line":43,"column":22}},{"start":{"line":44,"column":12},"end":{"line":46,"column":22}},{"start":{"line":47,"column":12},"end":{"line":49,"column":22}},{"start":{"line":50,"column":12},"end":{"line":52,"column":22}},{"start":{"line":53,"column":12},"end":{"line":55,"column":22}},{"start":{"line":56,"column":12},"end":{"line":57,"column":72}},{"start":{"line":58,"column":12},"end":{"line":59,"column":26}}],"line":37},"6":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{"line":61,"column":8},"end":{"line":63,"column":9}}],"line":61},"7":{"loc":{"start":{"line":70,"column":19},"end":{"line":70,"column":93}},"type":"binary-expr","locations":[{"start":{"line":70,"column":19},"end":{"line":70,"column":69}},{"start":{"line":70,"column":73},"end":{"line":70,"column":93}}],"line":70},"8":{"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":93}},"type":"binary-expr","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":69}},{"start":{"line":78,"column":73},"end":{"line":78,"column":93}}],"line":78},"9":{"loc":{"start":{"line":86,"column":19},"end":{"line":86,"column":95}},"type":"binary-expr","locations":[{"start":{"line":86,"column":19},"end":{"line":86,"column":69}},{"start":{"line":86,"column":73},"end":{"line":86,"column":95}}],"line":86},"10":{"loc":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},{"start":{"line":97,"column":12},"end":{"line":99,"column":13}}],"line":97},"11":{"loc":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},{"start":{"line":101,"column":12},"end":{"line":103,"column":13}}],"line":101},"12":{"loc":{"start":{"line":101,"column":16},"end":{"line":101,"column":56}},"type":"binary-expr","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":35}},{"start":{"line":101,"column":39},"end":{"line":101,"column":56}}],"line":101},"13":{"loc":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},{"start":{"line":104,"column":12},"end":{"line":106,"column":13}}],"line":104},"14":{"loc":{"start":{"line":104,"column":16},"end":{"line":104,"column":55}},"type":"binary-expr","locations":[{"start":{"line":104,"column":16},"end":{"line":104,"column":35}},{"start":{"line":104,"column":39},"end":{"line":104,"column":55}}],"line":104},"15":{"loc":{"start":{"line":107,"column":12},"end":{"line":109,"column":13}},"type":"if","locations":[{"start":{"line":107,"column":12},"end":{"line":109,"column":13}},{"start":{"line":107,"column":12},"end":{"line":109,"column":13}}],"line":107},"16":{"loc":{"start":{"line":107,"column":16},"end":{"line":107,"column":55}},"type":"binary-expr","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":34}},{"start":{"line":107,"column":38},"end":{"line":107,"column":55}}],"line":107},"17":{"loc":{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},{"start":{"line":110,"column":12},"end":{"line":112,"column":13}}],"line":110},"18":{"loc":{"start":{"line":110,"column":16},"end":{"line":110,"column":54}},"type":"binary-expr","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":34}},{"start":{"line":110,"column":38},"end":{"line":110,"column":54}}],"line":110},"19":{"loc":{"start":{"line":130,"column":16},"end":{"line":132,"column":17}},"type":"if","locations":[{"start":{"line":130,"column":16},"end":{"line":132,"column":17}},{"start":{"line":130,"column":16},"end":{"line":132,"column":17}}],"line":130},"20":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142}},"s":{"0":1,"1":1,"2":1,"3":1,"4":58,"5":2,"6":56,"7":2,"8":54,"9":56,"10":56,"11":34,"12":1,"13":1,"14":33,"15":22,"16":1,"17":21,"18":21,"19":21,"20":21,"21":7,"22":7,"23":1,"24":1,"25":1,"26":1,"27":7,"28":7,"29":2,"30":2,"31":1,"32":1,"33":2,"34":2,"35":19,"36":0,"37":19,"38":7,"39":7,"40":7,"41":21,"42":7,"43":1,"44":1,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":3,"52":1,"53":7,"54":7,"55":7,"56":7,"57":7,"58":7,"59":18,"60":0,"61":18,"62":18,"63":9,"64":9,"65":0,"66":9,"67":6,"68":3,"69":3,"70":0,"71":2,"72":2,"73":4,"74":4,"75":2,"76":1,"77":1,"78":2,"79":2,"80":2,"81":3,"82":2,"83":1,"84":2,"85":2,"86":2,"87":2,"88":6,"89":2,"90":2,"91":1},"f":{"0":58,"1":34,"2":22,"3":7,"4":21,"5":1,"6":3,"7":1,"8":3,"9":7,"10":18,"11":2,"12":1,"13":2},"b":{"0":[2,56],"1":[58,57],"2":[2,54],"3":[1,33],"4":[1,21],"5":[7,1,1,7,2,1,2,2],"6":[0,19],"7":[21,21],"8":[3,3],"9":[3,3],"10":[0,18],"11":[9,9],"12":[18,9],"13":[0,9],"14":[9,0],"15":[6,3],"16":[9,9],"17":[3,0],"18":[3,3],"19":[2,1],"20":[2,4]},"inputSourceMap":{"version":3,"file":"/Users/parsazehtab/project_team127/src/controller/WhereNode.ts","sources":["/Users/parsazehtab/project_team127/src/controller/WhereNode.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightError, ResultTooLargeError} from \"./IInsightFacade\";\nimport {FilterValidator} from \"./FilterValidator\";\n\n\n// Sources used:\n// 1. ChatGPT and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n// \t\tused for Object.prototype.hasOwnProperty.call() method in private helper methods for evaluate\n//\t\tChatGPT recommend this method, and the linked website was used to read and understand the method\nexport class WhereNode {\n\tprivate filter: any;\n\tprivate filterValidator: FilterValidator;\n\tprivate dataSetID: string;\n\n\t/**\n\t * constructor for WhereNode class\n\t * will throw an InsightError if the WHERE is not a valid JSON object,\n\t * If there is no where clause, it means we don't have one and so all entries match\n\t * @param whereClause\n\t * @param dataSetID\n\t */\n\tconstructor(whereClause: any, dataSetID: string) {\n\t\tif (typeof whereClause !== \"object\" || whereClause === null) {\n\t\t\tthrow new InsightError(\"WHERE clause must be a valid JSON object, and it is currently not\");\n\t\t}\n\t\t// check if the WHERE clause is empty, in which case, filter matches all results\n\t\tif (Object.keys(whereClause).length === 0) {\n\t\t\tthis.filter = null;\n\t\t} else {\n\t\t\tthis.filter = whereClause;\n\t\t}\n\t\tthis.dataSetID = dataSetID;  // Initialize the dataSetID member\n\t\tthis.filterValidator = new FilterValidator(this.dataSetID);  // Initialize the FilterValidator with the dataSetID\n\t}\n\n\t/**\n\t * Validation method to ensure that the WHERE clause is correct\n\t * Need to recursively check for nested logic comparisons: MComparison,SComparison, and negations also need\n\t * to be validated\n\t * If where clause is valid, return true, otherwise return false\n\t * @return boolean\n\t */\n\n\tpublic validate(): boolean {\n\t\t// Base Case: if the filter is null, it means we don't have one, and so we will return all the results\n\t\tif (this.filter === null) {\n\t\t\tconsole.log(\"null filter was returned\");\n\t\t\treturn true;\n\t\t}\n\n\t\t// Use the FilterValidator to validate the filter\n\t\treturn this.filterValidator.validateFilter(this.filter);\n\t}\n\n\t/**\n\t * Method to evaluate and filter the dataset\n\t * It will be filtered based on logic comparison and(or) MComparison, SComparison, and negation\n\t * Returns the filtered dataset\n\t * @param dataset\n\t * @return any[]\n\t */\n\n\tpublic evaluate(dataset: any[]): any[] {\n\t\t// Base Case: if the filter is null, we return the entire dataset\n\t\tif (this.filter === null) {\n\t\t\treturn dataset;\n\t\t}\n\n\t\t// declare variable that will hold the filtered results\n\t\tlet filteredResult: any[] = [];\n\t\tconst filterKey = Object.keys(this.filter)[0];\n\t\tconst filterValue = this.filter[filterKey];\n\n\t\t// switch case to handle the different types of filters\n\t\tswitch(filterKey) {\n\t\t\tcase \"GT\":\n\t\t\t\tfilteredResult = this.evaluateGT(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"LT\":\n\t\t\t\tfilteredResult = this.evaluateLT(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"EQ\":\n\t\t\t\tfilteredResult = this.evaluateEQ(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"IS\":\n\t\t\t\tfilteredResult = this.evaluateIS(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"AND\":\n\t\t\t\tfilteredResult = this.evaluateAND(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"OR\":\n\t\t\t\tfilteredResult = this.evaluateOR(filterValue, dataset);\n\t\t\t\tbreak;\n\t\t\tcase \"NOT\":\n\t\t\t\tfilteredResult = this.evaluateNOT(filterValue, dataset);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\tif (filteredResult.length > 5000) {\n\t\t\tthrow new ResultTooLargeError(\"More than 5000 results found\");\n\t\t}\n\t\treturn filteredResult;\n\t}\n\n\tprivate evaluateGT(filterValue: any, dataset: any[]) {\n\t\t// First, we need to obtain both the field and the value of the GT filter\n\t\tconst field = Object.keys(filterValue)[0];\n\t\tconst value = filterValue[field];\n\n\t\t// Filter the results\n\t\tconst filteredResults = dataset.filter((entry) => {\n\t\t\t// Ensure the field exists in the entry and its value is greater than the specified value\n\t\t\treturn Object.prototype.hasOwnProperty.call(entry, field) && entry[field] > value;\n\t\t});\n\n\t\treturn filteredResults;\n\t}\n\tprivate evaluateLT(filterValue: any, dataset: any[]) {\n\t\t// First, we need to obtain both the field and the value of the GT filter\n\t\tconst field = Object.keys(filterValue)[0];\n\t\tconst value = filterValue[field];\n\n\t\t// Filter the results\n\t\tconst filteredResults = dataset.filter((entry) => {\n\t\t\t// Ensure the field exists in the entry and its value is greater than the specified value\n\t\t\treturn Object.prototype.hasOwnProperty.call(entry, field) && entry[field] < value;\n\t\t});\n\n\t\treturn filteredResults;\n\t}\n\n\tprivate evaluateEQ(filterValue: any, dataset: any[]) {\n\t\t// First, we need to obtain both the field and the value of the GT filter\n\t\tconst field = Object.keys(filterValue)[0];\n\t\tconst value = filterValue[field];\n\n\t\t// Filter the results\n\t\tconst filteredResults = dataset.filter((entry) => {\n\t\t\t// Ensure the field exists in the entry and its value is greater than the specified value\n\t\t\treturn Object.prototype.hasOwnProperty.call(entry, field) && entry[field] === value;\n\t\t});\n\n\t\treturn filteredResults;\n\t}\n\n\tprivate evaluateIS(filterValue: any, dataset: any[]) {\n\t\tconst field = Object.keys(filterValue)[0];\n\t\tconst value = filterValue[field];\n\n\t\t// First let's check wildcards\n\t\tconst startsWithWildCard = value.startsWith(\"*\");\n\t\tconst endsWithWildCard = value.endsWith(\"*\");\n\n\t\t// Remove wildcards for comparison\n\t\tconst newValue = value.replace(/^\\*|\\*$/g, \"\");\n\n\t\treturn dataset.filter((entry) => {\n\t\t\t// Ensure the field exists in the entry\n\t\t\tif (!Object.prototype.hasOwnProperty.call(entry, field)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst entryValue = entry[field];\n\n\t\t\t// EXACT MATCH\n\t\t\tif (!startsWithWildCard && !endsWithWildCard) {\n\t\t\t\treturn entryValue === newValue;\n\t\t\t}\n\n\t\t\t// Starts with match\n\t\t\tif (!startsWithWildCard && endsWithWildCard) {\n\t\t\t\treturn entryValue.startsWith(newValue);\n\t\t\t}\n\n\t\t\t// Ends with match\n\t\t\tif (startsWithWildCard && !endsWithWildCard) {\n\t\t\t\treturn entryValue.endsWith(newValue);\n\t\t\t}\n\t\t\t// Contains\n\t\t\tif (startsWithWildCard && endsWithWildCard) {\n\t\t\t\treturn entryValue.includes(newValue);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tprivate evaluateAND(filterValue: any, dataset: any[]) {\n\t\tlet currentResults = dataset;\n\n\t\tfor (let filter of filterValue) {\n\t\t\tconst whereNode = new WhereNode(filter, this.dataSetID);\n\t\t\tcurrentResults = whereNode.evaluate(currentResults);\n\t\t}\n\n\t\treturn currentResults;\n\t}\n\n\t/**\n\t *\n\t * @param filterValue\n\t * @param dataset\n\t * @private\n\t * Create an empty array that will hold the results that match ANY of the filers\n\t * Iterate over every single filter value in the array for OR\n\t * For every filter in the OR[], create a new WhereNode which will be used to evaluate the filter against the OG\n\t * dataset\n\t * At the end: merge the results of each evaluation of the filter into the array we init at the start,  no dups\n\t */\n\tprivate evaluateOR(filterValue: any, dataset: any[]) {\n\t\tlet orFilterResult: any[] = [];\n\t\tfor (let filter of filterValue) {\n\t\t\tconst whereNode = new WhereNode(filter, this.dataSetID);\n\t\t\tconst filteredResults = whereNode.evaluate(dataset);\n\n\t\t\t// merge all the results, ensuring no dups\n\t\t\tfor (let result of filteredResults) {\n\t\t\t\tif (!orFilterResult.includes(result)) {\n\t\t\t\t\torFilterResult.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn orFilterResult;\n\t}\n\n\t/**\n\t *\n\t * @param filterValue\n\t * @param dataset\n\t * @private\n\t * Let's iterate over all the dataset, store everything that matches the filter, iterate over the dataset again\n\t * and add everything that isn't in the filteredResult\n\t */\n\tprivate evaluateNOT(filterValue: any, dataset: any[]) {\n\t\tconst whereNode = new WhereNode(filterValue, this.dataSetID);\n\t\tconst filteredResults = whereNode.evaluate(dataset);\n\n\t\tlet notFilteredResults: any[] = [];\n\t\tfor (let entry of dataset) {\n\t\t\tif (!filteredResults.includes(entry)) {\n\t\t\t\tnotFilteredResults.push(entry);\n\t\t\t}\n\t\t}\n\t\treturn notFilteredResults;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ce3ffcd35461c0c2d4834fbaf56c98f28b70c513","contentHash":"dc631f498ed3cc693536be361aec38989ae817189318fd5009dad559dd676d21"}}